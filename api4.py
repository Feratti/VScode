import requests
import hashlib
import hmac
import base64
import time
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime

# Email configuration
sender = "feratti@mail.ru"
password = "mWc3DC8Py4ZGApyFVsUR"
recipient = "kuzin.vadim@outlook.com"

# API configuration
endpoint = 'https://172.18.59.69'
app_key = '21225955'
access_token = 'Q4hUC71yQfqNI141LOoS'
url_events = '/artemis/api/acs/v1/door/events'
url_person = '/artemis/api/resource/v1/person/advance/personList'

eventCode = 196893
if eventCode == 196893:
    event = 'Access Granted by Face'

# Request payloads
command_payload = {
    "startTime": "2025-02-12T08:00:00+04:00",
    "endTime": "2025-02-12T20:00:00+04:00",
    "eventType": 196893,
    "personName": "",
    "doorIndexCodes": ["3"],
    "pageNo": 1,
    "pageSize": 100
}

def generate_signature(url, payload):
    timestamp = str(int(time.time()))
    body = json.dumps(payload)
    string_to_sign = f'POST\napplication/json\napplication/json;charset=UTF-8\n{url}'
    signature = base64.b64encode(hmac.new(access_token.encode(), string_to_sign.encode(), hashlib.sha256).digest()).decode()
    headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json;charset=UTF-8',
        'X-Ca-Key': app_key,
        'X-Ca-Signature': signature,
        'X-Ca-Timestamp': timestamp
    }
    return headers

# API Calls
headers_events = generate_signature(url_events, command_payload)
response_events = requests.post(f'{endpoint}{url_events}', headers=headers_events, json=command_payload, verify=False)

email_body = "This message was automatically generated by openAPI script\n\n"

if response_events.status_code == 200:
    event_data = response_events.json()
    total_events = event_data['data']['total']
    values = event_data['data']['list']
    email_body += f'Total events: {total_events}\nEvent type: {event}\n\n'
    results = []
    
    for entry in values:
        name = entry['personName']
        person_payload = {
            "pageNo": 1,
            "pageSize": 10,
            "personName": name,
            "cardNo": ""
        }
        
        headers_person = generate_signature(url_person, person_payload)
        response_person = requests.post(f'{endpoint}{url_person}', headers=headers_person, json=person_payload, verify=False)
        
        person_info = {}
        if response_person.status_code == 200:
            person_data = response_person.json()
            if person_data['data']['list']:
                person = person_data['data']['list'][0]
                person_info = {
                    "personCode": person.get("personCode", "N/A"),
                    "personPhoto": person.get("personPhoto", {}).get("picUri", "N/A")
                }
        
        record = {
            "Name": name,
            "Check in time": entry['eventTime'],
            "Check point name": entry['doorName'],
            "Temperature": entry.get('temperatureData', ''),
            "Person Code": person_info.get("personCode"),
            "Person Photo": person_info.get("personPhoto")
        }
        results.append(record)
        
        email_body += f"Name: {name}\nCheck in time: {entry['eventTime']}\nCheck point: {entry['doorName']}\n"
        email_body += f"Person Code: {person_info.get('personCode')}\nPerson Photo: {person_info.get('personPhoto')}\n\n"

    with open('results.json', 'w') as file:
        json.dump(results, file, indent=4)
    
    # Prepare email
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = recipient
    msg['Subject'] = f"Log from HCP | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    msg.attach(MIMEText(email_body, 'plain'))
    
    part = MIMEBase('application', "octet-stream")
    part.set_payload(open('results.json', "rb").read())
    encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="results.json"')
    msg.attach(part)
    
    # Send email
    s = smtplib.SMTP('smtp.mail.ru', 587)
    s.starttls()
    s.login(user=sender, password=password)
    s.send_message(msg)
    s.quit()
    print("Command executed successfully, email sent.")
else:
    print("Failed to execute command:", response_events.text)
