import requests
import hashlib
import hmac
import base64
import time
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from datetime import datetime
from email import encoders
import smtplib

#Send email info
sending_ts = datetime.now()
sub = "Log from HCP |  %s" % sending_ts.strftime('%Y-%m-%d %H:%M:%S')
msg = MIMEMultipart('alternative')
msg['From'] = 'feratti@mail.ru'
msg['To'] = 'kuzin.vadim@outlook.com'
msg['Subject'] = sub
sender = "feratti@mail.ru"
password = "mWc3DC8Py4ZGApyFVsUR"

# Replace these variables with your actual endpoint and credentials
endpoint = 'https://172.18.59.69'
app_key = '21225955'
access_token = 'Q4hUC71yQfqNI141LOoS'
url = '/artemis/api/acs/v1/door/events'
url_personinfo = '/artemis/api/resource/v1/person/advance/personList'

# Example command payload (replace this with your specific command)
command_payload = {
    "startTime":"2025-02-11T08:00:00+04:00",
    "endTime":"2025-02-11T20:00:00+04:00",
    "eventType":196893,
    "personName":"",
    "doorIndexCodes":["3"],
    "pageNo":1,
    "pageSize":100
}

command_payload_personinfo = {
    "pageNo":1,
    "pageSize":100,
    "personName": "Vadim Kuzin"
}

# Generate x-ca-signature
timestamp = str(int(time.time()))
body = json.dumps(command_payload)
string_to_sign = 'POST' + '\n' + 'application/json' + '\n' + 'application/json;charset=UTF-8' + '\n' + url
signature = base64.b64encode(hmac.new(access_token.encode(), string_to_sign.encode(), hashlib.sha256).digest()).decode()

timestamp = str(int(time.time()))
body = json.dumps(command_payload)
string_to_sign_personinfo = 'POST' + '\n' + 'application/json' + '\n' + 'application/json;charset=UTF-8' + '\n' + url_personinfo
signature_personinfo = base64.b64encode(hmac.new(access_token.encode(), string_to_sign_personinfo.encode(), hashlib.sha256).digest()).decode()

headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/json;charset=UTF-8',
    'X-Ca-Key': app_key,
    'X-Ca-Signature': signature,
    'X-Ca-Timestamp': timestamp
}

headers_personinfo = {
    'Accept': 'application/json',
    'Content-Type': 'application/json;charset=UTF-8',
    'X-Ca-Key': app_key,
    'X-Ca-Signature': signature_personinfo,
    'X-Ca-Timestamp': timestamp
}

command_url = f'{endpoint}' + url

command_url_persininfo = f'{endpoint}' + url_personinfo


response = requests.post(command_url, headers=headers, json=command_payload, verify=False)

response_personinfo = requests.post(command_url_persininfo, headers=headers_personinfo, json=command_payload_personinfo, verify=False)

if response.status_code == 200:
    result = response.text
    with open('data.json', 'w') as f:
        json.dump(result, f)
        f.close()

        js_obj = json.loads(result)
        jf = json.dumps(js_obj, indent=4)

        obj = MIMEBase('application',"octet-stream")
        obj.set_payload(jf)
        encoders.encode_base64(obj)

        emailbody = "This message was automatically generated by openAPI script" + '\n' + '\n' + 'Output of result:' '\n' + jf
        msg.attach(MIMEText(emailbody, 'plain'))

        obj.add_header('Content-Disposition', 'attachment; filename="test.json"')
        msg.attach(obj)

        s = smtplib.SMTP('smtp.mail.ru', 587)
        s.starttls()
        s.login(user=sender, password=password)
        s.send_message(msg)
        s.quit()
    print("Command executed successfully:", result)
else:
    print("Failed to execute command:", response.text)




if response_personinfo.status_code == 200:
    result_personinfo = response_personinfo.text
    with open('personinfo.json', 'w') as f:
        json.dump(result_personinfo, f)
        f.close()

        js_obj = json.loads(result_personinfo)
        jf = json.dumps(js_obj, indent=4)

        obj = MIMEBase('application',"octet-stream")
        obj.set_payload(jf)
        encoders.encode_base64(obj)

        emailbody = "This message was automatically generated by openAPI script" + '\n' + '\n' + 'Output of result:' '\n' + jf
        msg.attach(MIMEText(emailbody, 'plain'))

        obj.add_header('Content-Disposition', 'attachment; filename="personinfo.json"')
        msg.attach(obj)

        s = smtplib.SMTP('smtp.mail.ru', 587)
        s.starttls()
        s.login(user=sender, password=password)
        s.send_message(msg)
        s.quit()
    print("Command executed successfully:", result_personinfo)
else:
    print("Failed to execute command:", response_personinfo.text)